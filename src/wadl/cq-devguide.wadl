<?xml version="1.0" encoding="UTF-8"?>

<!-- (C) 2012 OpenStack LLC., All Rights Reserved  -->

<!DOCTYPE application [
    <!ENTITY % common  SYSTEM "../common/common.ent">
    %common;
    
    
]>


<application xmlns="http://wadl.dev.java.net/2009/02"
             xmlns:wadl="http://wadl.dev.java.net/2009/02"
	         xmlns:xlink="http://www.w3.org/1999/xlink"
             xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0"
	         xmlns:raxapi="http://docs.rackspace.com/volume/api/v1"
	         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	         xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	         xmlns:dbaas="http://docs.openstack.org/database/api/v1.0"
	         xmlns:queues="http://docs.openstack.org/database/api/v1.0">
	
	
<!--*******************************************************-->
<!--             Grammars                                  -->
<!--*******************************************************-->
<!-- What do I need here for Cloud Queues? Because CQ is not using Repose, probably don't need 
		grammars defined.
	<grammars>
		<include href="../common/xsd/api.xsd"/> (identity grammars)
		<include href="../common/xsd/api-common.xsd"/> (identity grammars)
		<include href="dbaas.xsd" /> (databases grammars)
	</grammars>
-->
	
<!--*******************************************************-->
<!--             All Resources                             -->
<!--*******************************************************-->
	
	
	<resources base="https://ord.queue.api.rackspacecloud.com/">
		<resource id="version" path="{versions}">
			<!--	Project ID was in the Header not in the URL but has recently been removed from header.	
				<resource id="projectID" path="{projectId}">
				<param name="projectId" style="template" type="xsd:string"> 
				<doc>The project ID of the owner of the specified
				queue. </doc></param>
			-->						
			<resource id="queues" path="queues">
				<method href="#listQueues" />	
				
				<resource id="queue" path="{queue_name}">
					<param name="queue_name" style="template" type="xsd:string">
						<doc>Specifies the name of the queue.</doc></param>
					<method href="#createQueue"/>
					<method href="#setQueueMetadata"/>							
					<method href="#getQueueMetadata"/>
					<method href="#deleteQueue"/>
					
					<resource id="stats" path="stats">
						<method href="#getQueueStats" />
					</resource>	
					<resource id="messages" path="messages">
						<method href="#postMessage" />
						<method href="#getMessages" />
						<method href="#getSetMessagesByID" />
						<resource id="message" path="{messageId}">
							<param name="messageId" style="template" type="xsd:string"> 
								<doc>Specifies the message ID.</doc></param>
							<method href="#getSpecificMessage" />
							<method href="#deleteMessage" />
						</resource>	
					<resource id="claims" path="claims">
						<method href="#claimMessages" />
						<resource id="claim" path="{claimId}">
							<param name="claimId" style="template" type="xsd:string"> 
								<doc>Specifies the claim ID.</doc></param>
							<method href="#queryClaim" />
							<method href="#updateClaim" />
							<method href="#releaseClaim" />
						</resource>	
					</resource>
					</resource>		
				</resource>
			</resource>
		</resource>			
	</resources>
	
<!--*******************************************************-->
<!--               All Methods                             -->
<!--*******************************************************-->

<!--*******************************************************-->
<!--              Queues Methods                           -->
<!--*******************************************************-->	
	
<!--*******************************************************-->	
<!--              Create Queue: createQueue                -->	  
<!--*******************************************************-->		
		<method name="PUT" id="createQueue">
			<wadl:doc xml:lang="EN" title="Create Queue" xmlns="http://docbook.org/ns/docbook">
				<para role="shortdesc">Creates a queue and sets its metadata.</para>  
				<para>This operation creates a new queue and sets its metadata.</para>
				<para>The body of the <command>PUT</command> is a document that can contain arbitrary metadata to be associated with the queue, up to 256 KB (configurable) when serialized as JSON, including whitespace. Top-level field names MUST NOT start with an underscore. Such names are reserved for future use.</para>				
				<note> <para><code>queue_name</code> is the name given to the queue. The name MUST NOT exceed 64 bytes in length, and is limited to US-ASCII letters, digits, underscores, and hyphens. If the specified queue already exists, the existing queue's metadata will be overwritten with the provided document.</para>
				</note>	
			</wadl:doc>
			<request>
				<representation mediaType="application/json" element="queues:Queue" >
					<doc>
						<xsdxt:code href="../wadl/samples/cq-createQueue_request.json"/>
					</doc>
				</representation>
			</request>
			<response status="201">		
				<representation mediaType="application/json" >
					<doc>
						<xsdxt:code href="../wadl/samples/cq-createQueue_response.json"/>
					</doc>
				</representation>
			</response>
			&commonFaults;
		</method>
	
<!--*******************************************************-->
<!--               List Queues: listQueues                 -->	
<!--*******************************************************-->	

	<method name="GET" id="listQueues" >
		<wadl:doc xml:lang="EN" title="List Queues" xmlns="http://docbook.org/ns/docbook">
			<para role="shortdesc">Lists queues.</para>  
			<para>This operation lists queues for the project, sorting the queues alphabetically by name. </para>
			<note><para>If you do not specify the <code>limit</code> query parameter, it defaults to 10. Forward-only paging is supported via "next" link. </para>  
				<para>The <code>detailed</code> query parameter defaults to <code>false</code>, which excludes the metadata field from the results. </para>	
			</note>	
			<!--
			<para>The following table lists the query attributes optionally available for List Queues:</para>
			<table rules="all">
				<caption>Attributes for List Queues</caption>
				<tbody>
					<tr>
						<td colspan="1">limit</td>
						<td colspan="3"><para>Specifies up to 20 (configurable) queues to return. If not specified, limit defaults to 10. Forward-only paging is supported via "next" link.</para></td>
						<td colspan="1">No</td>
					</tr>
					<tr>
						<td colspan="1">marker</td>
						<td colspan="3">Specifies the name of the last queue received in a previous request, or none to get the first page of results. </td>
						<td colspan="1">No</td>
					</tr>
					<tr>
						<td colspan="1">detailed</td>
						<td colspan="3">Specifies a boolean value ("true" or "false") that determines whether queue metadata is included in the response. If "false", the metadata field is excluded from the results. Defaults to "false".</td>
						<td colspan="1">No </td>
					</tr>
				</tbody>
			</table>
-->
		</wadl:doc>
		<request>
			<param name="marker" style="query" type="xsd:string" required="false">
				<wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN">
				Specifies the name of the last queue received in a previous request, or none to get the first page of results. 
				</wadl:doc>
			</param>
			<param name="limit" style="query" type="xsd:integer" required="false">
				<wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN">
				Specifies up to 20 (configurable) queues to return. 
				</wadl:doc>
			</param>
			<param name="detailed" style="query" type="xsd:boolean" required="false">
				<wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN">
				Determines whether queue metadata is included in the response. 
				</wadl:doc>
			</param>		
			<representation mediaType="application/json" element="queues:Queue" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-listQueues_request.json"/>
				</doc>
			</representation>
		</request>
		<response status="200">		
			<representation mediaType="application/json" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-listQueues_response.json"/>
				</doc>
			</representation>
		</response>
		&commonFaults;
		&getFaults;
	</method>

	
<!--*******************************************************-->	
<!--       Set Queue Metadata: setQueueMetadata *****      -->
<!--*******************************************************-->
	<method name="PUT" id="setQueueMetadata">
		<wadl:doc xml:lang="EN" title="Set Queue Metadata" xmlns="http://docbook.org/ns/docbook">
			<para role="shortdesc">Sets queue metadata.</para>  
			<para>This operation sets metadata for the queue.</para>
			<para>If <command>PUT</command> is used, this document replaces the existing metadata document in its entirety, so you need to be careful that you do not accidentally delete fields.</para>					
			<note> <para><code>queue_name</code> is the name given to the queue. The name MUST NOT exceed 64 bytes in length, and is limited to US-ASCII letters, digits, underscores, and hyphens. If the specified queue already exists, the existing queue's metadata will be overwritten with the provided document.</para>
			</note>		
		</wadl:doc>
		<request>
			<representation mediaType="application/json" element="queues:Queue" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-setQueueMetadata_request.json"/>
				</doc>
			</representation>
		</request>
		<response status="204">		
			<representation mediaType="application/json" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-setQueueMetadata_response.json"/>
				</doc>
			</representation>
		</response>
		&commonFaults;
	</method>

	
<!--*******************************************************-->	
<!--       Get Queue Metadata: getQueueMetadata *****      -->
<!--*******************************************************-->
	<method name="GET" id="getQueueMetadata">
		<wadl:doc xml:lang="EN" title="Get Queue Metadata" xmlns="http://docbook.org/ns/docbook">
			<para role="shortdesc">Returns queue metadata.</para>  
			<para>This operation returns metadata, such as message TTL, for the queue.</para>					
		</wadl:doc>
		<request>
			<representation mediaType="application/json" element="queues:Queue" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-getQueueMetadata_request.json"/>
				</doc>
			</representation>
		</request>
		<response status="204">		
			<representation mediaType="application/json" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-getQueueMetadata_response.json"/>
				</doc>
			</representation>
		</response>
		&commonFaults;
		&getFaults;
	</method>	

<!--*******************************************************-->
<!--          Get Queue Stats: getQueueStats               -->
<!--*******************************************************-->
	<method name="GET" id="getQueueStats">
		<wadl:doc xml:lang="EN" title="Get Queue Stats" xmlns="http://docbook.org/ns/docbook">
			<para role="shortdesc">Returns queue statistics.</para>  
			<para>This operation returns queue statistics including how many messages are in the queue, broken out by status.</para>	
		</wadl:doc>
		<request>
			<representation mediaType="application/json" element="queues:Queue" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-getQueueStats_request.json"/>
				</doc>
			</representation>
		</request>
		<response status="200">		
			<representation mediaType="application/json" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-getQueueStats_response.json"/>
				</doc>
			</representation>
		</response>
		&commonFaults;
		&getFaults;
	</method>
	
<!--*******************************************************-->						
<!--              Delete Queue: deleteQueue                -->
<!--*******************************************************-->		
	<method name="DELETE" id="deleteQueue">
		<wadl:doc xml:lang="EN" title="Delete Queue" xmlns="http://docbook.org/ns/docbook">
			<para role="shortdesc">Deletes the queue. </para>  
			<para>This operation immediately deletes a queue along with all its messages (if any). </para>		
		</wadl:doc>
		<request>
			<representation mediaType="application/json" element="queues:Queue" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-deleteQueue_request.json"/>
				</doc>
			</representation>
		</request>
		<response status="204">		
			<representation mediaType="application/json" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-deleteQueue_response.json"/>
				</doc>
			</representation>
		</response>
		&commonFaults;
	</method>	
 
<!--*******************************************************-->
<!--               Messages Methods                        -->
<!--*******************************************************-->	
	
<!--*******************************************************-->						
<!--           Post Message: postMessage                   -->
<!--*******************************************************-->			
	<method name="POST" id="postMessage">
		<wadl:doc xml:lang="EN" title="Post Message" xmlns="http://docbook.org/ns/docbook">
			<para role="shortdesc">Posts the message or messages for the specified queue. </para>  
			<para>This operation posts the specified message or messages. </para>
			<para>You can submit up to 20 messages (configurable) in a single request, but you must always encapsulate the messages in a collection container (an array in JSON). The resulting value of the Location header or response body may be used to retrieve the created messages for further processing, if needed. </para>
			<para>The client only specifies the body and TTL for the message. The server will insert metadata, such as ID and age.</para>
			<note><para>The response body contains a list of resource paths corresponding to each message submitted in the request, in the same order. In the case of a server-side error part-way through the processing of the submitted messages, a partial list will be returned, <code>partial</code> will be <code>true</code>, and the client will need to retry posting the remaining messages. If no messages can be enqueued, the server returns <code>503 Service Unavailable</code>. </para>
			<para><code>body</code> specifies an arbitrary document which constitutes the body of the message being sent. The size of this body, in characters and including whitespace, is 256 KiB (configurable). The document MUST be valid JSON (Cloud Queues will validate it). </para>
			<para><code>ttl</code> is how long the server should wait before expiring and removing the message from the queue. The value of <code>ttl</code> MUST be between 60 and 1209600 seconds (14 days, configurable), inclusive. Note that the server may not actually delete the message until its age has reached up to (ttl + 60) seconds, to allow for flexibility in storage implementations. </para>
			</note>
		</wadl:doc>
		<request>
			<representation mediaType="application/json" element="queues:Queue" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-postMessage_request.json"/>
				</doc>
			</representation>
		</request>
		<response status="201">		
			<representation mediaType="application/json" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-postMessage_response.json"/>
				</doc>
			</representation>
		</response>
		&commonFaults;
		&getFaults;
		&postFaults;	
	</method>	
	
<!--*******************************************************-->						
<!--           Get Messages: getMessages                   -->
<!--*******************************************************-->			
	<method name="GET" id="getMessages">
		<wadl:doc xml:lang="EN" title="Get Messages" xmlns="http://docbook.org/ns/docbook">
			<para role="shortdesc">Gets the message or messages in the specified queue. </para>  
			<para>This operation gets the message or messages in the specified queue. </para>
			<para>Message IDs and markers are opaque strings. Clients should make no assumptions about their format or length. Furthermore, clients should assume that there is no relationship between markers and message IDs (that is, one cannot be derived from the other). This allows for a wide variety of storage driver implementations. </para>
			<para>Results are ordered by age, oldest message first. </para>
			<note><para>If <code>limit</code> is not specified, it defaults to 10. When more messages are available than can be returned in a single request, the client can pick up the next batch by simply using the URI template parameters returned from the previous call in the "next" field.</para>
			<para><code>marker</code> communicates to the server which messages the client has already received. If marker is not specified, the API will return all messages at the head of the queue (up to limit).</para>
			<para><code>echo</code> is a boolean value (<code>true</code> or <code>false</code>) that determines whether the API returns a client's own messages, as determined by the <code>uuid</code> portion of the User-Agent header. If not specified, <code>echo</code>echo defaults to <code>false</code>.</para>
			</note>
		</wadl:doc>
		<request>
			<param name="marker" style="query" type="xsd:string" required="false">
				<wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN">
					Specifies an opaque string that the client can use to request the next batch of messages. 
				</wadl:doc>
			</param>
			<param name="limit" style="query" type="xsd:integer" required="false">
				<wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN">
					Specifies up to 20 (configurable) queues to return. 
				</wadl:doc>
			</param>
			<param name="echo" style="query" type="xsd:boolean" required="false">
				<wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN">
					Determines whether the API returns a client's own messages. 
				</wadl:doc>
			</param>			
			<representation mediaType="application/json" element="queues:Queue" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-getMessages_request.json"/>
				</doc>
			</representation>
		</request>
		<response status="200">		
			<representation mediaType="application/json" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-getMessages_response.json"/>
				</doc>
			</representation>
		</response>
		&commonFaults;
		&getFaults;
	</method>
	
<!--*******************************************************-->						
<!--      Get a Specific Message: getSpecificMessage       -->
<!--*******************************************************-->			
	<method name="GET" id="getSpecificMessage">
		<wadl:doc xml:lang="EN" title="Get a Specific Message" xmlns="http://docbook.org/ns/docbook">
			<para role="shortdesc">Gets the specified message from the specified queue. </para>  
			<para>This operation gets the specified message from the specified queue. </para>
			<para>Message fields are defined as follows:<itemizedlist><listitem><para><code>href</code> is an opaque relative URI that the client can use to uniquely identify a message resource, and interact with it. </para></listitem><listitem><para><code>ttl</code> is the ttl set on the message when it was posted. The message expires after (ttl - age) seconds. </para></listitem><listitem><para><code>age</code> is the number of seconds since ts, relative to the server's clock.</para></listitem><listitem><para><code>body</code> is the arbitrary document submitted along with the original request to post the message. </para></listitem></itemizedlist></para>
		</wadl:doc>
		<request>
			<param name="claim_id" style="query" type="xsd:string" required="false">
				<wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN">
					Filters on claim_id. 
				</wadl:doc>
			</param>
			<representation mediaType="application/json" element="queues:Queue" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-getSpecificMessage_request.json"/>
				</doc>
			</representation>
		</request>
		<response status="200">		
			<representation mediaType="application/json" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-getSpecificMessage_response.json"/>
				</doc>
			</representation>
		</response>
		&commonFaults;
		&getFaults;
	</method>

<!--*******************************************************-->						
<!--     Get a Set of Messages by ID: getSetMessagesByID   -->
<!--*******************************************************-->			
	<method name="GET" id="getSetMessagesByID">
		<wadl:doc xml:lang="EN" title="Get a Set of Messages by ID" xmlns="http://docbook.org/ns/docbook">
			<para role="shortdesc">Gets a set of messages specified from the specified queue. </para>  
			<para>This operation provides a more efficient way to query multiple messages, rather than having to do so in a series of individual <command>GET</command>s.  </para>
			<para>Unlike the message listing, a client's own messages are always returned in this approach. </para>
			<para>Message fields are defined as follows:<itemizedlist><listitem><para><code>href</code> is an opaque relative URI that the client can use to uniquely identify a message resource, and interact with it. </para></listitem><listitem><para><code>ttl</code> is the TTL set on the message when it was posted. The message expires after (ttl - age) seconds. </para></listitem><listitem><para><code>age</code> is the number of seconds since ts, relative to the server's clock.</para></listitem><listitem><para><code>body</code> is the arbitrary document submitted along with the original request to post the message. </para></listitem></itemizedlist></para>
			<note><para>When you use the <code>ids</code> parameter, the <code>echo</code> query parameter is not used and is ignored if it is given.</para>
			</note>	
		</wadl:doc>
		<request>
			<param name="ids" style="query" type="xsd:string" required="false">
				<wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN">
					Filters on id. 
				</wadl:doc>
			</param>
			<param name="claim_id" style="query" type="xsd:string" required="false">
				<wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN">
					Specifies the claim ID to which the message is associated. 
				</wadl:doc>
			</param>
			<representation mediaType="application/json" element="queues:Queue" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-getSetMessagesByID_request.json"/>
				</doc>
			</representation>
		</request>
		<response status="200">		
			<representation mediaType="application/json" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-getSetMessagesByID_response.json"/>
				</doc>
			</representation>
		</response>
		&commonFaults;
		&getFaults;
	</method>
 	
<!--*******************************************************-->						
<!--           Delete Message: deleteMessage               -->
<!--*******************************************************-->			
	<method name="DELETE" id="deleteMessage">
		<wadl:doc xml:lang="EN" title="Delete Message" xmlns="http://docbook.org/ns/docbook">
			<para role="shortdesc">Deletes the specified message from the specified queue. </para>  
			<para>This operation immediately deletes the specified message. </para>
			<note><para><code>claim_id</code> specifies that the message should be deleted only if it has the specified claim ID, and that claim has not expired. This is useful for ensuring only one agent processes any given message. Whenever a worker client's claim expires before it has a chance to delete a message it has processed, the worker must roll back any actions it took based on that message because another worker will now be able to claim and process the same message. </para></note>
		</wadl:doc>
		<request>
			<param name="claim_id" style="query" type="xsd:string" required="false">
				<wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN">
					Identifies the claim. 
				</wadl:doc>	
			</param>	
			<representation mediaType="application/json" element="queues:Queue" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-deleteMessage_request.json"/>
				</doc>
			</representation>
		</request>
		<response status="204">		
			<representation mediaType="application/json" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-deleteMessage_response.json"/>
				</doc>
			</representation>
		</response>
		&commonFaults;
		&deleteFaults;
	</method>	
	
<!--*******************************************************-->	
<!--                 CLAIMS METHODS                        -->
<!--*******************************************************-->		
	
<!--*******************************************************-->						
<!--            Claim Messages: claimMessages              -->
<!--*******************************************************-->			
	<method name="POST" id="claimMessages">
		<wadl:doc xml:lang="EN" title="Claim Messages" xmlns="http://docbook.org/ns/docbook">
			<para role="shortdesc">Claims a set of messages from the specified queue. </para>  
			<para>This operation claims a set of messages, up to <code>limit</code>, from oldest to newest, skipping any that are already claimed. If no unclaimed messages are available, the API returns <code>204 No Content</code>. </para>
			<para>The client should delete the message when it has finished processing it, before the claim expires, to ensure the message is processed only once. As part of the delete operation, all worker clients should specify the claim ID (this is best done by simply using the provided href). That way, the server can return an error if the claim just expired (notifying the client of the race condition), giving the worker a chance to roll back its own processing of the given message, since another worker will likely claim the message and process it. </para>
			<para>Just as with a message's age, the age given for the claim is relative to the server's clock, and is useful for determining how quickly messages are getting processed, and whether a given message's claim is about to expire. </para>
			<para>When a claim expires, it is removed, allowing another client worker to claim the message in the case that the original worker fails to process it. </para>
			<note><para>If <code>limit</code> is not specified, <code>limit</code> defaults to 10. Note that claim creation is best-effort, meaning the server may claim and return less than the requested number of messages. </para>
			<para><code>ttl</code> is how long the server should wait before releasing the claim. The <code>ttl</code> value MUST be between 60 and 43200 seconds (12 hours, configurable). </para>
			<para><code>grace</code> is the message grace period in seconds. The value of <code>grace</code> MUST be between 60 and 43200 seconds (12 hours, configurable). The server extends the lifetime of claimed messages to be at least as long as the lifetime of the claim itself, plus a specified grace period to deal with crashed workers (up to 1209600 or 14 days including claim lifetime). If a claimed message would normally live longer than the grace period, it's expiration will not be adjusted.  </para>
			</note>		
		</wadl:doc>
		<request>
			<param name="limit" style="query" type="xsd:integer" required="false">
				<wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN">
					Specifies up to 20 (configurable) queues to return. 
				</wadl:doc>
			</param>
			<representation mediaType="application/json" element="queues:Queue" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-claimMessages_request.json"/>
				</doc>
			</representation>
		</request>
		<response status="200">		
			<representation mediaType="application/json" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-claimMessages_response.json"/>
				</doc>
			</representation>
		</response>
		&commonFaults;
		&getFaults;
	</method>		
<!--*******************************************************-->						
<!--               Query Claim: queryClaim                 -->
<!--*******************************************************-->			
	<method name="GET" id="queryClaim">
		<wadl:doc xml:lang="EN" title="Query Claim" xmlns="http://docbook.org/ns/docbook">
			<para role="shortdesc">Queries the specified claim for the specified queue. </para>  
			<para>This operation queries the specified claim for the specified queue. </para>
		</wadl:doc>
		<request>
			<representation mediaType="application/json" element="queues:Queue" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-queryClaim_request.json"/>
				</doc>
			</representation>
		</request>
		<response status="200">		
			<representation mediaType="application/json" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-queryClaim_response.json"/>
				</doc>
			</representation>
		</response>
		&commonFaults;
		&getFaults;
	</method>	

<!--*******************************************************-->						
<!--               Update Claim: updateClaim                 -->
<!--*******************************************************-->			
	<method name="PATCH" id="updateClaim">
		<wadl:doc xml:lang="EN" title="Update Claim" xmlns="http://docbook.org/ns/docbook">
			<para role="shortdesc">Updates the specified claim for the specified queue. </para>  
			<para>This operation updates the specified message for the specified queue. </para>
			<para>Clients should periodically renew claims during long-running batches of work to avoid loosing a claim in the middle of processing a message. This is done by issuing a <command>PATCH</command> to a specific claim resource and including a new TTL for the claim (which may be different from the original TTL). The server resets the age of the claim and applies the new TTL.</para>
		</wadl:doc>
		<request>
			<representation mediaType="application/json" element="queues:Queue" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-updateClaim_request.json"/>
				</doc>
			</representation>
		</request>
		<response status="204">		
			<representation mediaType="application/json" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-updateClaim_response.json"/>
				</doc>
			</representation>
		</response>
		&commonFaults;
		&getFaults;
	</method>		
	
<!--*******************************************************-->						
<!--               Release Claim: releaseClaim                 -->
<!--*******************************************************-->			
	<method name="DELETE" id="releaseClaim">
		<wadl:doc xml:lang="EN" title="Release Claim" xmlns="http://docbook.org/ns/docbook">
			<para role="shortdesc">Releases the specified claim for the specified queue. </para>  
			<para>This operation immediately releases a claim, making any (remaining, non-deleted) messages associated with the claim available to other workers. </para>
			<para>This operation is useful when a worker is performing a graceful shutdown, fails to process one or more messages, or is taking longer than expected to process messages, and wishes to make the remainder available to other workers. </para>
		</wadl:doc>
		<request>
			<representation mediaType="application/json" element="queues:Queue" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-releaseClaim_request.json"/>
				</doc>
			</representation>
		</request>
		<response status="204">		
			<representation mediaType="application/json" >
				<doc>
					<xsdxt:code href="../wadl/samples/cq-releaseClaim_response.json"/>
				</doc>
			</representation>
		</response>
		&commonFaults;
		&getFaults;
	</method>		

</application>
