<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
        <!-- Some useful entities borrowed from HTML -->
        <!ENTITY ndash  "&#x2013;">
        <!ENTITY mdash  "&#x2014;">
        <!ENTITY hellip "&#x2026;">
        
        <!-- Useful for describing APIs -->
        <!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
        <!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
        <!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
        <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>
        
        <!-- changing authentication endpoints; define entities for US & UK rather than maintaining in text -->
        <!ENTITY ENDPOINT-US "https://identity.api.rackspacecloud.com/v1.1/">
        <!ENTITY ENDPOINT-UK "https://lon.identity.api.rackspacecloud.com/v1.1/">
        <!ENTITY ENDPOINT-US-20 "https://identity.api.rackspacecloud.com/v2.0/">
        <!ENTITY ENDPOINT-UK-20 "https://lon.identity.api.rackspacecloud.com/v2.0/">
        
        <!ENTITY CHECK  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
                 <imageobject>
                  <imagedata fileref="img/Check_mark_23x20_02.svg"
                             format="SVG" scale="60"/>
                </imageobject>
              </inlinemediaobject>'>
              
        <!ENTITY ARROW  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
                 <imageobject>
                  <imagedata fileref="img/Arrow_east.svg"
                             format="SVG" scale="60"/>
                </imageobject>
              </inlinemediaobject>'>
]>
<book  
    status="draft"
    xmlns="http://docbook.org/ns/docbook" 
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude" 
    xmlns:svg="http://www.w3.org/2000/svg"
    version="5.0-extension RaxBook-2.0"    
    xml:id="cq-devguide">
  <?rax canonical.url.base="http://docs.rackspace.com/queuing/api/v1.0/cs-devguide/content"?>
  <title>Cloud Queuing Developer Guide</title>
  <titleabbrev>Cloud Queuing Developer Guide</titleabbrev>
  <info>
    <author xmlns:wadl="http://wadl.dev.java.net/2009/02">
      <personname>
        <firstname/>
        <surname/>
      </personname>
      <affiliation>
        <orgname>Rackspace Cloud</orgname>
      </affiliation>
    </author>
    <copyright>
      <year>2013</year>
      <holder>Rackspace US, Inc.</holder>
    </copyright>
    <releaseinfo>API v1.0 Preview</releaseinfo>
    <productname>Cloud Queuing</productname><!--Note that the <productname> text matches the first few words of the title. The build system splits the title into productname + rest of title on the pdf cover.-->
    <pubdate>2013-07-15</pubdate>
    <!--If you leave the <pubdate> element empty, the build system inserts today's date automatically. -->
    <abstract xmlns:wadl="http://wadl.dev.java.net/2009/02">
      <para>This document is intended for software developers
        interested in developing applications using the Rackspace
        Cloud Queuing Application Programming Interface
          (<abbrev>API</abbrev>). </para>
    </abstract>    <!--
          <para>This is the revision history section. The technical
            writer updates this section when major changes are made to
            the doc to indicate what changed. Typically this will
            include links into the body of the document. From this
            element we generate the list in <xref
              linkend="change_history"/> as well as the atom feed for
            the document an <link xlink:href="../atom.xml">atom
              feed</link> for the document. <itemizedlist
              spacing="compact">
              <listitem>
                <para>Itemized lists are useful constructs for
                  improving the readability of documents.</para>
              </listitem>
              <listitem>
                <para>One way that itemized lists improve readablity
                  is by adding whitespace between the list
                  items.</para>
              </listitem>
              <listitem>
                <para>Dates should be in the format YYYY-MM-DD.
                </para>
              </listitem>
            </itemizedlist></para>
            -->
    
    <revhistory>
      <revision>
        <date>2013-07-15</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Initial Early Access (EA) release.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
    </revhistory>
    <legalnotice role="rs-api">
      <annotation>
        <remark>Copyright details are filled in by the build system.</remark>
      </annotation>
    </legalnotice>
    <!-- 
       The values in raxm:metadata are used to control where the content appears on the landing page in docs.rackspace.com.
       Work with the Cloud Doc Tools team to find out what to put here. Once established, you should not change these
       values without first consulting with the CDT team.
    -->
      <raxm:metadata xmlns:raxm="http://docs.rackspace.com/api/metadata">
        <raxm:displayname>API Developer Guide</raxm:displayname>
        <raxm:product version="v1.0">queuing</raxm:product>
        <raxm:priority>20</raxm:priority>
      </raxm:metadata>
  </info>
  <chapter xml:id="overview"
    xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns:wadl="http://wadl.dev.java.net/2009/02">
    <title>Overview</title>
    <para>Rackspace Cloud Queuing is an API-based message and
      notification service. A message queueing service is a vital
      component of big, complex web applications. Cloud Queuing from
      Rackspace is designed to fill this need. Cloud Queuing is based
      on the OpenStack Marconi project.</para>
    <para>As you develop more complex web applications, you often have
      multiple servers set up to complete a set of tasks for that
      application. These tasks can be anything from creating users to
      deleting blocks of storage. Cloud Queuing is a service that owns
      the lists of tasks, but not necessarily the order or workflow of
      the tasks. Many applications handle the workflow at a higher
      level.</para>
    <para>Cloud Queuing creates an open alternative to the
      producer-consumer and the publish-subscribe (pub-sub) messaging
      patterns for use in applications that run on OpenStack clouds. </para>
    <para>The Cloud Queuing API uses a modular architecture and
      supports unified pub-sub and job-queuing semantics. You can
      customize Cloud Queuing to achieve a wide range of performance,
      durability, availability, and efficiency goals. </para>
    <para>Interactions with Cloud Queuing occur programmatically via
      the Cloud Queuing API as described in this developer
      guide.</para>
    <remark security="reviewer">Reviewer: do you want to replace the
      marketing info above with something more technical? Please give
      me your suggestions. We could also add a diagram of Cloud
      Queuing infrastructure / architecture if you can give it to me.
      For an example, see the DB diagram at <link
        xlink:href="http://docs.rackspace.com/cdb/api/v1.0/cdb-devguide/content/overview.html"
        >
        http://docs.rackspace.com/cdb/api/v1.0/cdb-devguide/content/overview.html</link>.</remark>
    <section xml:id="Intended_Audience-d1e166">
      <title>Intended Audience</title>
      <para>This document is intended for software developers who are
        interested in developing applications that use the Rackspace
        Cloud Queuing API. We assume you have the following
        skills:</para>
    </section>
    <section xml:id="Document_Change_History-d1e166">
      <title>Document Change History</title>
      <para>This version of the Developer Guide replaces and obsoletes
        all previous versions. The most recent changes are described
        in the table below:</para>
      <?rax revhistory?>
    </section>
    <section xml:id="Additional_Resources-d1e532">
      <title>Additional Resources</title>
      <para> For more details about Cloud Queuing, refer to ??? (link
        to www.rackspace.com/cloud/queue???) . This site also offers
        links to Rackspace's official support channels, including
        knowledge base articles, forums, phone, chat, and
        email.</para>
      <remark security="reviewer">Reviewer: do you have a
        corresponding link for the Cloud Queuing
        landing page on rackspace.com/cloud? If so, can you please
        give it to me?</remark>
      <para>For information about getting started using Cloud Queuing,
        refer to the <citetitle>Cloud Queuing Getting Started
          Guide</citetitle>. </para>
      <para>Email all support questions to:
          <email>cbdteam@rackspace.com</email>. </para>
      <remark security="reviewer">Reviewer: do you have a
        corresponding email distribution list for the Cloud Queuing
        team to provide initial product support? If so, can you please
        give it to me?</remark>
      <para>Please visit our <link
          xlink:href="http://feedback.rackspace.com/forums/71021-product-feedback/category/6841-cloud-sites"
          >Product Feedback Forum</link> and let us know what you
        think about Cloud Queuing!</para>
      <para>You can follow Rackspace updates and announcements via
        twitter at: <link
          xlink:href="http://www.twitter.com/rackspace"
          >www.twitter.com/rackspace</link>. </para>
      <para>This API uses standard HTTP 1.1 response codes as
        documented at: <link
          xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
          >www.w3.org/Protocols/rfc2616/rfc2616-sec10.html</link>.
      </para>
    </section>
    <section xml:id="API_Contract_Changes-d1e363">
      <title>API Contract Changes</title>
      <para>The API contract is not locked and may change during the
        Eary Access (EA) Program.</para>
      <para>Rackspace will notify customers in Release Notes when and
        if the contract does change.</para>
    </section>
    <section xml:id="Pricing_SLA-d1e1362">
      <title>Pricing and Service Level</title>
      <para>Cloud Queuing is part of the Rackspace Cloud and your use
        through the API will be billed as per the pricing schedule at
          <link
          xlink:href="http://www.rackspace.com/cloud/sites/pricing/"
          >http://www.rackspace.com/cloud/sites/pricing/</link>.</para>
      <remark security="reviewer">Reviewer: Questions about pricing
        for Cloud Queuing... seems to be up in the air... not charge
        or billed? Please let me know.</remark>
      <para>The Service Level Agreement (SLA) for Cloud Queuing is
        available at <link
          xlink:href="http://www.rackspace.com/cloud/legal/sla/#cloud_sites"
          >http://www.rackspace.com/cloud/legal/sla/#cloud_sites</link>.</para>
      <remark security="reviewer">Reviewer: do you have a
        corresponding link for SLA for the Cloud Queuing? If so, can
        you please give it to me?</remark>
    </section>
  </chapter>
  <chapter xml:id="Concepts"
    xmlns:wadl="http://wadl.dev.java.net/2009/02">
    <title>Concepts</title>
    <para> To use the Cloud Queuing API effectively, you should
      understand several key concepts: </para>
    <section xml:id="Site-d1e588"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml">
      <title>How Cloud Queuing Works</title>
      <para>Here is an overview of the Cloud Queuing workflow: </para>
      <orderedlist>
        <listitem>
          <para>You create a queue to which producers post
            messages.</para>
        </listitem>
        <listitem>
          <para>Workers claim messages from the queue, complete the
            work in that message, and delete the message.</para>
          <para>If a worker plans to be offline before its message
            completes, the worker can retire the claim Time To Live
            (TTL), putting the message back into the queue for another
            worker to claim. </para>
        </listitem>
        <listitem>
          <para>Subscribers monitor the claims of these queues to keep
            track of activity and help troubleshoot if things go
            wrong.</para>
        </listitem>
      </orderedlist>
      <para>For the majority of use cases, Cloud Queuing itself will
        not be responsible for the ordering of messages. If there is
        only a single producer, however, Cloud Queueing guarantees
        that messages are handled in a First In, First Out (FIFO)
        order. </para>
      <para>See the <xref linkend="glossary_1"/> for terms that are
        key to understanding how Cloud Queuing works.</para>
    </section>
    <section xml:id="DatabaseInstance-d1e588"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml">
      <title>Operating Modes</title>
      <para>Cloud Queuing uses the operating modes described in the
        following sections. </para>
      <section xml:id="producer_consumer">
        <title>Producer-Consumer</title>
        <para>Characteristics of the Producer-Consumer mode
          are:</para>
        <itemizedlist>
          <listitem>
            <para>The worker acts on <emphasis role="italic">only one
                message</emphasis>.</para>
          </listitem>
          <listitem>
            <para>The worker must delete the message when work is
              done.</para>
          </listitem>
          <listitem>
            <para>TTL restores a message to an unclaimed state if the
              worker never finishes.</para>
          </listitem>
          <listitem>
            <para>This mode is ideal for dispatching jobs to multiple
              processors.</para>
          </listitem>
        </itemizedlist>
      </section>
      <section xml:id="publish_subscribe">
        <title>Publish-Subscribe</title>
        <para>Characteristics of the Publish-Subscribe mode
          are:</para>
        <itemizedlist>
          <listitem>
            <para>All subscribers listen to the messages in the queue.
            </para>
          </listitem>
          <listitem>
            <para>Messages are not claimed.</para>
          </listitem>
          <listitem>
            <para>Subscribers can send a marker/cursor to skip
              messages already seen. </para>
          </listitem>
          <listitem>
            <para>TTL eventually deletes messages. </para>
          </listitem>
          <listitem>
            <para>This mode is ideal for notification of events to
              multiple listeners at once.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
    <section xml:id= "cloud-queuing-actions-1">
      <title>Cloud Queuing Requests</title>
      <para>This section provides a list of requests that are possible
        using the Cloud Queuing API.</para>
      <section xml:id="queue-actions1" >
        <title>Queues</title>
        <para>The following requests are available for queues: </para>
        <itemizedlist>
          <listitem>
            <para>Create Queue</para>
          </listitem>
          <listitem>
            <para>List Queues</para>
          </listitem>
          <listitem>
            <para>Set Queue Metadata</para>
          </listitem>
          <listitem>
            <para>Get Queue Metadata</para>
          </listitem>
          <listitem>
            <para>Get Queue Stats</para>
          </listitem>
          <listitem>
            <para>Delete Queue</para>
          </listitem>
        </itemizedlist>
      </section>
        <section xml:id="message-actions">
          <title>Messages</title>
          <para>The following requests are available for
            messages:</para>
          <itemizedlist>
            <listitem>
              <para>Post Message(s)</para>
            </listitem>
            <listitem>
              <para>Get Messages</para>
            </listitem>
            <listitem>
              <para>Get a Specific Message</para>
            </listitem>
            <listitem>
              <para>Claim Messages</para>
            </listitem>
            <listitem>
              <para>Delete Message(s)</para>
            </listitem>
          </itemizedlist>
        </section>
      <section xml:id="claim-actions">
        <title>Claims</title>
        <para>The following requests are available for claims:</para>
        <itemizedlist>
          <listitem>
            <para>Query Claim</para>
          </listitem>
          <listitem>
            <para>Update Claim</para>
          </listitem>
          <listitem>
            <para>Release Claim</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
    <section xml:id="use_cases"> 
      <title>Use Cases</title>
      <para>Following are some possible use cases for Cloud
        Queuing:</para>
      <itemizedlist>
        <listitem>
          <para> To distribute tasks among multiple workers
            (transactional job queues). </para>
        </listitem>
        <listitem>
          <para>To forward events to data collectors (transactional
            event queues).</para>
        </listitem>
        <listitem>
          <para>To publish events to any number of subscribers
            (publish-subscribe).</para>
        </listitem>
        <listitem>
          <para>To send commands to one or more agents (point-to-point
            or publish-subscribe).</para>
        </listitem>
        <listitem>
          <para>To request an action or get information from a Remote
            Procedure Call (RPC) agent.</para>
        </listitem>
      </itemizedlist>
    </section>
  </chapter>
  <chapter xml:id="Gen_API_Info-de01">
    <title>General API Information</title>
    <para>The Cloud Queuing API is implemented using a ReSTful web
      service interface. Like other products in the Rackspace Cloud
      suite, Cloud Queuing shares a common token-based authentication
      system that allows seamless access between products and
      services.</para>
    <note>
      <para>All requests to authenticate against and operate the
        service are performed using SSL over HTTP (HTTPS) on TCP port
        443.</para>
    </note>
  </chapter>
    <chapter xml:id="somesection" role="api-reference">
      <title>API Reference</title>
      <para>For more information on how this section works, see <link
        xlink:href="http://docs-internal.rackspace.com/writers-guide/content/ch_wadl.html"
        >Generating an API reference from a WADL file</link>. </para>

      <resources xmlns="http://wadl.dev.java.net/2009/02" href="../wadl/example.wadl"/>
      
    </chapter>
  <glossary>
    <title>Glossary</title>
    <info>
      <raxm:metadata
        xmlns:raxm="http://docs.rackspace.com/api/metadata">
        <raxm:type>concept</raxm:type>
        <raxm:product version="v1.0">cdns</raxm:product>
        <raxm:priority>50</raxm:priority>
      </raxm:metadata>
    </info>
    <glossentry xml:id="glossary_1">
      <glossterm>Claim</glossterm>
      <glossdef>
        <para> A worker claims or checks out a message to perform a
          task. Doing so prevents other workers from attempting to
          perform the same task.</para>
      </glossdef>
    </glossentry>
    <glossentry xml:id="message-d1e016">
      <glossterm>Message</glossterm>
      <glossdef>
        <para>A message is a task, a notification, or anything else
          that gets posted to the queue.</para>
      </glossdef>
    </glossentry>
    <glossentry xml:id="producer-d1e020">
      <glossterm>Producer</glossterm>
      <glossdef>
        <para>A producer is a server that sends messages to the
          queue.</para>
      </glossdef>
    </glossentry>
    <glossentry xml:id="queue-d1e019">
      <glossterm>Queue</glossterm>
      <glossdef>
        <para>A queue holds messages.</para>
      </glossdef>
    </glossentry>
    <glossentry xml:id="subscriber-d1e018">
      <glossterm>Subscriber</glossterm>
      <glossdef>
        <para>A subscriber (or observer) watches messages like an RSS
          feed, but does not claim any messages.</para>
      </glossdef>
    </glossentry>
    <glossentry xml:id="worker-d1e018">
      <glossterm>Worker</glossterm>
      <glossdef>
        <para>A worker is a server that claims a messages and performs
          the necessary task.</para>
      </glossdef>
    </glossentry>
  </glossary>
</book>
