<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
<!-- Some useful entities borrowed from HTML -->
        <!ENTITY ndash "&#x2013;">
        <!ENTITY mdash "&#x2014;">
        <!ENTITY hellip "&#x2026;">
   
 
        
        <!-- changing authentication endpoints; define entities for US & UK rather than maintaining in text -->
        <!ENTITY ENDPOINT-US-20 "https://identity.api.rackspacecloud.com/v2.0/">
        <!ENTITY ENDPOINT-UK-20 "https://lon.identity.api.rackspacecloud.com/v2.0/">
 
]>

<book
    xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    version="5.0-extension RaxBook-2.0"    
    xml:id="cq-gettingstarted">
  <title>Cloud Queuing Getting Started Guide</title>
  <?rax title.font.size="30px" 
      pdf.url="../../cq-gettingstarted-latest.pdf" 
      status.bar.text.font.size="40px"
      status.bar.text="Preview" 
      canonical.url.base="http://docs.rackspace.com/queuing/api/v1.0/cs-gettingstarted/content"?>
  <titleabbrev xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml">Cloud Queuing
    Getting Started Guide</titleabbrev>
  <info>
    <copyright>
      <year>2013</year>
      <holder>Rackspace US, Inc.</holder>
    </copyright>
    <releaseinfo>API v1.0 Preview</releaseinfo>
    <productname>Cloud Queuing</productname>
    <pubdate>2013-07-07</pubdate>
    <legalnotice role="rs-api">
      <annotation>
        <remark>Copyright details are filled in by the
        template. </remark>
      </annotation>
    </legalnotice>
    <revhistory>
      <revision>
        <date>2013-07-07</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Because Cloud Queuing now has SSL certification,
                -k was removed from cURL examples, and the endpoint
                information at <xref linkend="core_concepts"/> and
                  <xref linkend="access-api-2"/> was updated.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision> <revision>
        <date>2013-06-26</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Initial Preview release.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
    </revhistory>
    <raxm:metadata
        xmlns:raxm="http://docs.rackspace.com/api/metadata">
      <raxm:displayname>Getting Started Guide</raxm:displayname>
      <raxm:product version="v1.0">queuing</raxm:product>
      <raxm:priority>1</raxm:priority>
    </raxm:metadata>
  </info>
  <chapter xml:id="DB_Overview" xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml">
    <title>Overview</title>
    <para>Rackspace Cloud Queuing is an API-based message and
      notification service. A message queueing service is a vital
      component of big, complex web applications. Cloud Queuing from
      Rackspace is designed to fill this need. Cloud Queuing is based
      on the OpenStack Marconi project.</para>
    <para>As you develop more complex web applications, you often have
      multiple servers set up to complete a set of tasks for that
      application. These tasks can be anything from creating users to
      deleting blocks of storage. Cloud Queuing is a service that owns
      the lists of tasks, but not necessarily the order or workflow of
      the tasks. Many applications handle the workflow at a higher
      level.</para>
    <para>Cloud Queuing creates an open alternative to the
      producer-consumer and the publish-subscribe (pub-sub) messaging
      patterns for use in applications that run on OpenStack clouds. </para>
    <para>The Cloud Queuing RESTful API uses a modular architecture
      and supports unified pub-sub and job-queuing semantics. You can
      customize Cloud Queuing to achieve a wide range of performance,
      durability, availability, and efficiency goals. </para>
    <para>This guide explains how to access and get started using the
      API so you can begin using Cloud Queuing for your applications.
      Instructions are given for how to properly enter the necessary
      URLs, using cURL, in order to set up and use a basic set of
      Cloud Queuing operations.
      <!-- for
        <trademark>Cloud Servers</trademark>. You can find additional
      details about Rackspace Cloud Queuing in the <citetitle>Cloud
        Queuing Developer Guide</citetitle> at <link
        xlink:href="http://docs.rackspace.com/"
        >http://docs.rackspace.com/</link> and at <link
        xlink:href="http://www.rackspace.com/cloud/cloud_hosting_products/dns/"
        >http://www.rackspace.com/cloud/</link>. --></para>
    <section xml:id="core_concepts">
      <title>Preview Program</title>
      <para xmlns:wadl="http://wadl.dev.java.net/2009/02">The Preview
        program enables customers and Rackers, by invitation, to test
        an early version of the product and provide feedback of the
        product and capabilities. The Cloud Queuing Preview Program is
        a pre-production service offering covered by the Beta Services
        terms (<link
          xlink:href="http://www.rackspace.com/information/legal/testterms/"
          > rackspace.com/information/legal/testterms/</link>) in our
        Rackspace Cloud Terms of Service.</para>
      <para xmlns:wadl="http://wadl.dev.java.net/2009/02"> Preview
        users must meet the following criteria: <itemizedlist
          spacing="compact">
          <listitem>
            <para>A Rackspace Cloud account.</para>
          </listitem>
          <listitem>
            <para>Prior knowledge of HTTP/1.1 conventions.</para>
          </listitem>
          <listitem>
            <para>Basic familiarity with Cloud and RESTful
              APIs.</para>
          </listitem>
          <listitem>
            <para>A willingness to provide feedback to Rackspace’s
              Product and Product Marketing functions.</para>
          </listitem>
        </itemizedlist>
      </para>
      <para>The endpoint for the Preview environment is:</para>
      <itemizedlist>
        <listitem>
          <para>https://preview.queue.api.rackspacecloud.com:443</para>
        </listitem>
      </itemizedlist>
 <!--
      <para>The endpoints for the Preview environment are:</para>
      <itemizedlist>
        <listitem>
          <para>http://preview.queue.api.rackspacecloud.com:80</para>
        </listitem>
        <listitem>
          <para>
            https://preview.queue.api.rackspacecloud.com:443</para>
        </listitem>
      </itemizedlist>
      <para>A valid certificate is not yet available.  Once the
        certificate is available, the http link will go away. </para>
      <para>Until the certificate is available, the https URL will
        work only if you turn cert verification off. Following is the
        cURL command to do this is:</para>
      <programlisting>curl -k -i -X PUT https://preview.queue.api.rackspacecloud.com:443/v1/queues/samplequeue -d '{"metadata": "Awesome Queue"}' -H "Content-type: application/json" -H "X-Auth-Token: 68d94fd912cc4b2bb5c2fe956de46d46" -H "X-Project-Id: 101010" </programlisting>

-->
       <para xmlns:wadl="http://wadl.dev.java.net/2009/02">The Preview
        Program has some limitations. By using the Cloud Queuing API,
        you agree and understand that:<itemizedlist spacing="compact">
          <listitem>
            <para>There is no charge for this service during the
              Preview period.</para>
          </listitem>
          <listitem>
            <para>If you participate in this Preview Program, you will
              receive a notification prior to general availability.
            </para>
          </listitem>
          <listitem>
            <para>There is no Service Level Agreement. </para>
          </listitem>
          <listitem>
            <para>The API contract is not locked and may change during
              the Preview Program. Rackspace will notify customers in
              Release Notes when and if the contract does
              change.</para>
          </listitem>
          <listitem>
            <para>Support is available from 8 AM – 5 PM (Central Time)
              Monday–Friday.</para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <section xml:id="how_cq_works">
      <title>How Cloud Queuing Works</title>
      <para>Here is an overview of the Cloud Queuing workflow: </para>
      <orderedlist>
        <listitem>
          <para>You create a queue to which producers post
            messages.</para>
        </listitem>
        <listitem>
          <para>Workers claim messages from the queue, complete the
            work in that message, and delete the message.</para>
          <para>If a worker plans to be offline before its message
            completes, the worker can retire the claim Time To Live
            (TTL), putting the message back into the queue for another
            worker to claim. </para>
        </listitem>
        <listitem>
          <para>Subscribers monitor the claims of these queues to keep
            track of activity and help troubleshoot if things go
            wrong.</para>
        </listitem>
      </orderedlist>
      <para>For the majority of use cases, Cloud Queuing itself will
        not be responsible for the ordering of messages. If there is
        only a single producer, however, Cloud Queueing guarantees
        that messages are handled in a First In, First Out (FIFO)
        order. </para>
      <para>See the <xref linkend="glossary-d1e018"/> for terms that
        are key to understanding how Cloud Queuing works.</para>
    </section>
    <section xml:id="operating_modes">
      <title>Operating Modes</title>
      <para>Cloud Queuing uses the operating modes described in the
        following sections. </para>
      <section xml:id="producer_consumer">
        <title>Producer-Consumer</title>
        <para>Characteristics of the Producer-Consumer mode
          are:</para>
        <itemizedlist>
          <listitem>
            <para>The worker acts on <emphasis role="italic">only one
                message</emphasis>.</para>
          </listitem>
          <listitem>
            <para>The worker must delete the message when work is
              done.</para>
          </listitem>
          <listitem>
            <para>TTL restores a message to an unclaimed state if the
              worker never finishes.</para>
          </listitem>
          <listitem>
            <para>This mode is ideal for dispatching jobs to multiple
              processors.</para>
          </listitem>
        </itemizedlist>
      </section>
      <section xml:id="publish_subscribe">
        <title>Publish-Subscribe</title>
        <para>Characteristics of the Publish-Subscribe mode
          are:</para>
        <itemizedlist>
          <listitem>
            <para>All subscribers listen to the messages in the queue.
            </para>
          </listitem>
          <listitem>
            <para>Messages are not claimed.</para>
          </listitem>
          <listitem>
            <para>Subscribers can send a marker/cursor to skip
              messages already seen. </para>
          </listitem>
          <listitem>
            <para>TTL eventually deletes messages. </para>
          </listitem>
          <listitem>
            <para>This mode is ideal for notification of events to
              multiple listeners at once.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
    <section xml:id="cloud-queuing-actions" >
      <title>Cloud Queuing Requests</title>
      <para>This section provides a list of requests that are possible
        using the Cloud Queuing API. </para>
      <section xml:id="queue-actions">
        <title>Queues </title>
        <para>The following requests are available for queues: </para>
        <itemizedlist>
          <listitem>
            <para>Create Queue</para>
          </listitem>
          <listitem>
            <para>List Queues</para>
          </listitem>
          <listitem>
            <para>Set Queue Metadata</para>
          </listitem>
          <listitem>
            <para>Get Queue Metadata</para>
          </listitem>
          <listitem>
            <para>Get Queue Stats</para>
          </listitem>
          <listitem>
            <para>Delete Queue</para>
          </listitem>
        </itemizedlist>
      </section>
      <section xml:id="message-actions">
        <title>Messages</title>
        <para>The following requests are available for
          messages:</para>
        <itemizedlist>
          <listitem>
            <para>Post Message(s)</para>
          </listitem>
          <listitem>
            <para>Get Messages</para>
          </listitem>
          <listitem>
            <para>Get a Specific Message</para>
          </listitem>
          <listitem>
            <para>Claim Messages</para>
          </listitem>
          <listitem>
            <para>Delete Message(s)</para>
          </listitem>
        </itemizedlist>
      </section>
      <section xml:id="claim-actions">
        <title>Claims</title>
        <para>The following requests are available for claims:</para>
        <itemizedlist>
          <listitem>
            <para>Query Claim</para>
          </listitem>
          <listitem>
            <para>Update Claim</para>
          </listitem>
          <listitem>
            <para>Release Claim</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
    <section xml:id="use_cases" >
      <title>Use Cases</title>
      <para>Following are some possible use cases for Cloud Queuing: </para>
      <itemizedlist>
        <listitem>
          <para> To distribute tasks among multiple workers
            (transactional job queues). </para>
        </listitem>
        <listitem>
          <para>To forward events to data collectors (transactional
            event queues).</para>
        </listitem>
        <listitem>
          <para>To publish events to any number of subscribers
            (publish-subscribe).</para>
        </listitem>
        <listitem>
          <para>To send commands to one or more agents (point-to-point
            or publish-subscribe).</para>
        </listitem>
        <listitem>
          <para>To request an action or get information from a Remote
            Procedure Call (RPC) agent.</para>
        </listitem>
      </itemizedlist>
    </section>
  </chapter>
  <chapter xml:id="prerequisites" >
    <title>Prerequisites</title>
    <para>This section describes the prerequisities for working with
      Cloud Queuing.</para>
    <section xml:id="cloud-account">
      <title>Open a Rackspace Cloud Account</title>
      <para xmlns:svg="http://www.w3.org/2000/svg"
        xmlns:m="http://www.w3.org/1998/Math/MathML"
        xmlns:html="http://www.w3.org/1999/xhtml">In order to use the
        Cloud Queuing API, you must have the following prerequisites:
          <itemizedlist spacing="compact">
          <listitem>
            <para>Rackspace Cloud account</para>
          </listitem>
          <listitem>
            <para>Rackspace Cloud username and password, as specified
              during registration</para>
          </listitem>
        </itemizedlist></para>
    </section>
    <section xml:id="access-api-2" >
      <title>Accessing the API</title>
      <para xmlns:svg="http://www.w3.org/2000/svg"
        xmlns:m="http://www.w3.org/1998/Math/MathML"
        xmlns:html="http://www.w3.org/1999/xhtml">The endpoint for the
        Preview environment is: </para>
      <itemizedlist>
        <listitem>
          <para>https://preview.queue.api.rackspacecloud.com:443</para>
        </listitem>
      </itemizedlist>
   <!--   <itemizedlist xmlns:svg="http://www.w3.org/2000/svg"
        xmlns:m="http://www.w3.org/1998/Math/MathML"
        xmlns:html="http://www.w3.org/1999/xhtml">
        <listitem>
          <para>http://preview.queue.api.rackspacecloud.com:80</para>
        </listitem>
        <listitem>
          <para>
            https://preview.queue.api.rackspacecloud.com:443</para>
        </listitem>
      </itemizedlist>
      <para xmlns:svg="http://www.w3.org/2000/svg"
        xmlns:m="http://www.w3.org/1998/Math/MathML"
        xmlns:html="http://www.w3.org/1999/xhtml">A valid certificate
        is not yet available. Once the certificate is available, the
        http link will go away. </para>
      <para xmlns:svg="http://www.w3.org/2000/svg"
        xmlns:m="http://www.w3.org/1998/Math/MathML"
        xmlns:html="http://www.w3.org/1999/xhtml">Until the
        certificate is available, the https URL will work only if you
        turn cert verification off. Following is the cURL command to
        do this is:</para>
      <programlisting>curl -k -i -X PUT https://preview.queue.api.rackspacecloud.com:443/v1/queues/samplequeue -d '{"metadata": "Awesome Queue"}' -H "Content-type: application/json" -H "X-Auth-Token: 68d94fd912cc4b2bb5c2fe956de46d46" -H "X-Project-Id: 101010" </programlisting>
 -->
      <!--
      <para>To access the Rackspace Cloud Queuing API use the
        following URL:</para>
      <para>https://queue.api.rackspacecloud.com/v1.0/ 1234</para>
      <note>
        <para>1234 represents your account number and is used as a
          placeholder. (The account number is also sometimes shown as
          the tenant ID.) When you work with the API, remember to use
          your Rackspace account number. If you don't know your
          account number, it is included in the publicURL, which is
          part of the Authentication response. See <xref
            linkend="authentication-1"/> .</para>
      </note>
      -->
    </section>
    <section xml:id="authentication-1">
      <title>Authentication</title>
      <para> Every ReST request against the Cloud Queuing requires the
        inclusion of a specific authorization token, supplied by the
          <code>X-Auth-Token</code> HTTP header. Customers obtain this
        token by first using the Rackspace Cloud Authentication
        Service and supplying a valid username and API access key. </para>
      <para> To authenticate, submit a <code>POST/v2.0/tokens</code>
        request, presenting valid Rackspace customer credentials in
        the message body to a Rackspace authentication endpoint. </para>
      <para>
        <emphasis role="bold">GET YOUR CREDENTIALS</emphasis>
      </para>
      <para> You can use either of two sets of credentials: <itemizedlist>
          <listitem>
            <para>your <code>username</code> and
              <code>password</code></para>
          </listitem>
          <listitem>
            <para>your <code>username</code> and <code>API
              key</code></para>
          </listitem>
        </itemizedlist>
      </para>
      <para> Your <code>username</code> and <code>password</code> are
        the ones you use to login to the Rackspace control panel. Once
        you are logged in, you can use the Rackspace control panel to
        obtain your <code>API key</code>. </para>
      <para> Use the control panel for the region in which your
        account is based: <itemizedlist spacing="compact">
          <listitem>
            <para> US-based accounts use the control panel at <link
                xlink:href="https://manage.rackspacecloud.com/"
                >https://manage.rackspacecloud.com/</link>. </para>
          </listitem>
          <listitem>
            <para> UK-based accounts use the control panel at <link
                xlink:href="https://lon.manage.rackspacecloud.com/">
                https://lon.manage.rackspacecloud.com/</link>. </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">CHOOSE YOUR AUTHENTICATION </emphasis>
      </para>
      <para> Use the authentication endpoint for the region in which
        your account is based: <itemizedlist>
          <listitem>
            <para>All accounts authenticate through <link
                xlink:href="https://identity.api.rackspacecloud.com/v2.0/tokens"
                >
              identity.api.rackspacecloud.com/v2.0/tokens</link>.</para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">SEND YOUR CREDENTIALS TO YOUR
          AUTHENTICATION ENDPOINT</emphasis>
      </para>
      <para> If you know your credentials and your authentication
        endpoint, and you can issue a <code>POST /v2.0/tokens</code>
        request in an API call, you have all the basic information you
        need to use the Rackspace Cloud Identity Service. </para>
      <!--
      <para> You can use <link xlink:href="http://curl.haxx.se/"
          >cURL</link> to try the authentication process in two steps:
        get a token; send the token to a service.<orderedlist>
          <listitem>
            <para>Get an authentication token by providing your
              username and either your API key or your password. Here
              are examples of both approaches:</para>
            <para><emphasis>You can request a token by providing your
                username and your API key.</emphasis></para>
            <para>
              <literallayout class="monospaced">curl -X POST https://auth.api.rackspacecloud.com/v2.0/tokens -d 
'{ "auth":{ "RAX-KSKEY:apiKeyCredentials":{ "username":"theUserName", "apiKey":"00a00000a000a0000000a000a00aaa0a" } } }' -H "Content-type: application/json"</literallayout>
            </para>
            <para><emphasis>You can request a token by providing your
                username and your password.</emphasis></para>
            <para>
              <literallayout class="monospaced">curl -X POST https://auth.api.rackspacecloud.com/v2.0/tokens -d
'{"auth":{"passworg":{"username":"theUserName","password":"thePassword"}}}' -H "Content-type: application/json"</literallayout>
            </para>
            <para> Successful authentication returns a token which you
              can use as evidence that your identity has already been
              authenticated. To use the token, pass it to other
              services as an <code>X-Auth-Token</code> header. </para>
            <para> Authentication also returns a service catalog,
              listing the endpoints you can use for Cloud services.
            </para>
          </listitem>
          <listitem>
            <para>Use the authentication token to send a GET to a
              service you would like to use. Here is an example of
              passing an authentication token to the Cloud Files
              service, using the Cloud Files service catalog endpoint
              that was returned along with the token.</para>
            <para><emphasis>You can use a token and a service endpoint
                to tell a service that your credentials are
                valid.</emphasis></para>
          </listitem>
        </orderedlist>
      </para>
      -->
      <para>Authentication tokens are typically valid for 24 hours.
        Applications should be designed to re-authenticate after
        receiving a 401 (Unauthorized) response from a service
        endpoint. </para>
      <!-- 
      <important>
        <para>If you are programmatically parsing an authentication
          response, please be aware that service names are stable for
          the life of the particular service and can be used as keys.
          You should also be aware that a user's service catalog can
          include multiple uniquely-named services which perform
          similar functions. In Auth 2.0, the service type attribute
          can be used as a key by which to recognize similar services;
          see the tip below. </para>
      </important>
      -->
      <!--
      <para>You need to generate a token whether you use cURL or a
        ReST client.</para>
      <para>In order to use the ReST API, you will first need to
        obtain an authentication token, which will need to be passed
        in for each request using the <code>X-Auth-Token</code>
        header. </para>
      <para>The following example demonstrates how to use cURL to
        obtain the authentication token and the account number. You
        will need to supply the authentication token and account
        number when making subsequent Cloud Queuing API calls.</para>
      <para>Remember to replace the names in the Authenticate Request
        examples below with their respective values:<itemizedlist
          spacing="compact">
          <listitem>
            <para><emphasis role="bold">your_username</emphasis>
              &mdash; The username is your common Rackspace Cloud
              username, as supplied during registration.</para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">your_api_key</emphasis>
              &mdash; The key is your API access key. The key can be
              obtained from the Rackspace Cloud Control Panel in the
                <guimenu>&lt;Your Account></guimenu> /
                <guimenuitem>API Keys</guimenuitem> section (login
              here: <link xlink:href="http://mycloud.rackspace.com/"
                >Cloud Control Panel</link>).</para>
          </listitem>
        </itemizedlist></para>
      <para> Your account may be based in either the US or the UK;
        this is not determined by your physical location but by the
        location of the Rackspace retail site that was used to create
        your account: </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para> If your account was created via <link
              xlink:href="http://www.rackspacecloud.com"
              >http://www.rackspacecloud.com</link>, it is a US-based
            account. </para>
        </listitem>
        <listitem>
          <para> If your account was created via <link
              xlink:href="http://www.rackspace.co.uk"
              >http://www.rackspace.co.uk</link>, it is a UK-based
            account. </para>
        </listitem>
      </itemizedlist>
      <para>Notice that you authenticate using a special URL for Cloud
        authentication services. For example, you may use
          <code>https://identity.api.rackspacecloud.com/v2.0/tokens</code>,
        as shown in the following Authentication Request examples.
        Note that the <code>v2.0</code> component in the URL indicates
        that you are using version 2.0 of the Cloud Auth API.</para>
      <example>
        <title>cURL Authentication Request: XML</title>
        <?dbfo keep-together="always"?>
        <screen language="bash"><command>curl</command> <option>-i</option> <option>-d</option> \
'&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;auth>
   &lt;apiKeyCredentials
      xmlns="http://docs.rackspace.com/identity/api/ext/RAX-KSKEY/v1.0"
         username="<emphasis role="bold">your_username</emphasis>"
         apiKey="<emphasis role="bold">your_api_key</emphasis>"/>
&lt;/auth>' \
<option>-H 'Content-Type: application/xml'</option> \
<option>-H 'Accept: application/xml'</option> \
<uri>'https://identity.api.rackspacecloud.com/v2.0/tokens'</uri></screen>
      </example>
      <example>
        <title>cURL Authentication Request: JSON</title>
        <?dbfo keep-together="always"?>
        <screen language="bash"><command>curl</command> <option>-i</option> <option>-d</option> \
'{
    "auth":
    {
       "RAX-KSKEY:apiKeyCredentials":
       {
          "username": "<emphasis role="bold">your_username</emphasis>",
          "apiKey": "<emphasis role="bold">your_api_key</emphasis>"}
    }
}' \
<option>-H 'Content-Type: application/json'</option> \
<uri>'https://identity.api.rackspacecloud.com/v2.0/tokens'</uri></screen>
      </example>
      <note>
        <para>For UK-based accounts, you may decide to use
            <code>'https://lon.identity.api.rackspacecloud.com/v2.0/tokens'</code>
          instead.</para>
      </note>
      <para>In your authentication request, use your own credentials
        rather than the sample values shown here for username,
        password. and tenantId. When you authenticate successfully,
        the response to your authentication request will include a
        catalog of the services to which you have subscribed. </para>
        -->
      <para>You can request a token by providing your username and
        your API key as shown in the following example.</para>
      <example>
        <title>cURL Authentication Request with Username and API
          Key</title>
        <programlisting>curl -X POST https://identity.api.rackspacecloud.com/v2.0/tokens -d '{ "auth":{ "RAX-KSKEY:apiKeyCredentials":{ "username":"theUserName", "apiKey":"00a00000a000a0000000a000a00aaa0a" } } }' -H "Content-type: application/json" | python -mjson.tool</programlisting>
      </example>
      <para>You can also request a token by providing your username
        and your password as shown in the next example.</para>
      <example>
        <title>cURL Authentication Request with Username and
          Password</title>
        <programlisting>curl -X POST https://identity.api.rackspacecloud.com/v2.0/tokens -d '{"auth":{"passwordCredentials":{"username":"theUserName","password":"thePassword"}}}' -H "Content-type: application/json" | python -mjson.tool</programlisting>
      </example>
      <!--
      <para>The following example shows only the service catalog
        portion of the authentication response.</para>
      <example>
        <title>Service Catalog in Authentication Response:
          JSON</title>
        <programlisting>{
    "access": {
        "serviceCatalog": [
           ...
        ],
        "token": {
            "expires": "2012-04-13T13:15:00.000-05:00",
            "id": "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee",
             "tenant": {
                "id": "123456",
                "name": "123456"
            } 
        },
        "user": {
            "RAX-AUTH:defaultRegion": "DFW",
            "id": "161418",
            "name": "demoauthor",
            "roles": [
                {
                    "description": "User Admin Role.",
                    "id": "3",
                    "name": "identity:user-admin"
                }
            ]
        }
    }
}</programlisting>
      </example>
      <para>Note your token.id and your user.id. The token.tenant.id
        is your "tenantID" and you will need it to make requests to
        Autoscale. </para>
      <para>If the auth token received is
        "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee" and your tenantID is
        123456, the following example request will list all groups
        you've created:</para>
      <example>
        <title>Authentication Request to List Groups Created</title>
        <programlisting>$ curl -X GET -H "Content-Type: application/json" -H "X-Auth-token: {auth-token}" https://{region}.XXX.XXX.rackspacecloud.com/v1.0/{tenant-id}/groups/ | python -mjson.tool
 </programlisting>
      </example>
      -->
      <!--
      <para>The authentication token <code>id</code> is returned along
        with an <code>expires</code> attribute that specifies when the
        token expires. </para>
      <note>
        <title>Notes</title>
        <itemizedlist spacing="compact">
          <listitem>
            <para>For all response examples in this guide, the field
              values you receive in your responses will vary from
              those shown here since they will be specific to your
              account.</para>
          </listitem>
          <listitem>
            <para>The information shown in the Authentication Response
              examples above is for US-based accounts. If you
              authenticate against the UK-endpoint for auth, you will
              see the service catalog information for UK-based
              accounts.</para>
          </listitem>
          <listitem>
            <para>The <code>id</code> attribute in the Authentication
              Response specifies the authentication token. Tokens are
              valid for a finite duration.</para>
            <para>Remember to supply your authentication token
              wherever you see the field <emphasis role="bold"
                >your_auth_token</emphasis> in the examples in this
              guide.</para>
          </listitem>
          <listitem>
            <para> The <code>expires</code> attribute denotes the time
              after which the token will automatically become invalid.
              A token may be manually revoked before the time
              identified by the expires attribute;
                <code>expires</code> predicts a token's maximum
              possible lifespan but does not guarantee that it will
              reach that lifespan. Clients are encouraged to cache a
              token until it expires.</para>
          </listitem>
          <listitem>
            <para>Applications should be designed to re-authenticate
              after receiving a 401 (Unauthorized) response from a
              service endpoint.</para>
          </listitem>
        </itemizedlist>
      </note>
      <para>The <code>publicURL</code> endpoints for Cloud Queuing (for
        example <code>https://
          ord.queue.api.rackspacecloud.com/v1.0/1100111</code>) are
        also returned in the response. </para>
      <para>You will find the actual account number after the final
        '/' in the <code>publicURL</code> field. In this example, you
        can see that the account number is 1100111. You need to
        specify your account number on most of the Cloud Queuing API
        calls, wherever you see the field <code>your_acct_id</code>
        specified in the examples in this guide.</para>
      <para>After authentication, you can use cURL to perform GET ,
        DELETE , and POST requests for the Cloud Queuing </para>
        -->
      <!--
    </section>
    <section xml:id="endpoints" >
      <title>Endpoints</title>
      <para>The endpoint to use for your Cloud Queuing API calls for
        the Preview program is:</para>
      <para><code>https://ord.queue.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/ </para>
      <para>or</para>
      <para><code>https://snet-ord.queue.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/ </para>

      <para>The endpoints to use for your Cloud Queuing API calls are
        summarized in the table below.</para>
      
      <para>
        <table rules="all">
          <caption>Regionalized Service Endpoints</caption>
          <thead>
            <tr align="center">
              <td colspan="2">Region</td>
              <td colspan="5">Endpoint</td>
            </tr>
          </thead>
          <tbody>
            <tr align="left">
              <td colspan="2">Chicago (ORD)</td>
              <td colspan="5"
                  ><code>https://ord.queue.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/ </td>
            </tr>
            <tr>
              <td colspan="2"/>
              <td colspan="5"
                  ><code>https://snet-ord.queue.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/
              </td>
            </tr>
            <tr align="left">
              <td colspan="2">Dallas/Ft. Worth (DFW)</td>
              <td colspan="5"
                  ><code>https://dfw.queue.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/ </td>
            </tr>
            <tr>
              <td colspan="2"/>
              <td colspan="5"
                  ><code>https://snet-dfw.queue.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/</td>
            </tr>
            <tr align="left">
              <td colspan="2">London (LON)</td>
              <td colspan="5">
                <code>https://lon.queue.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/ </td>
            </tr>
            <tr>
              <td colspan="2"/>
              <td colspan="5"
                  ><code>https://snet-lon.queue.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/
              </td>
            </tr>
            <tr align="left">
              <td colspan="2">Sydney (SYD)</td>
              <td colspan="5">
                <code>https://syd.queue.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/ </td>
            </tr>
            <tr>
              <td colspan="2"/>
              <td colspan="5"
                  ><code>https://snet-syd.queue.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/
              </td>
            </tr>
          </tbody>
        </table>
      </para>
      <note>
        <title>Notes:</title>
        <itemizedlist>
          <listitem>
            <para>Choose the endpoint from the table for the
              datacenter where your Cloud resources are
              located.</para>
          </listitem>
          <listitem>
            <para>All examples in this guide assume that you
              are operating against the ORD datacenter,
              however if you are using a different
              datacenter, be sure to use the associated
              endpoint from the table above instead.</para>
          </listitem>
        </itemizedlist>
      </note>
      <para>Replace the sample account ID number,
          <parameter>1234</parameter>, with your actual account number
        returned as part of the authentication response. Use your
        actual account number wherever you see the field <emphasis
          role="bold">your_acct_id</emphasis> specified in this guide.
        Refer to <xref linkend="authentication-1"/>. </para>
      <para>When making a Cloud Queuing API call, place the endpoint
        at the beginning of the request URL, for example:
          (<code>https://ord.queue.api.rackspacecloud.com/v1.0/your_acct_id/</code>.</para>
-->
      <!--
      <section xml:id="using-curl">
        <title>Using cURL</title>
        <para xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:m="http://www.w3.org/1998/Math/MathML"
          xmlns:html="http://www.w3.org/1999/xhtml">You have several
          options for sending requests through an API: </para>
        <itemizedlist spacing="compact"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:m="http://www.w3.org/1998/Math/MathML"
          xmlns:html="http://www.w3.org/1999/xhtml">
          <listitem>
            <para>Developers and testers may prefer to use cURL, the
              command-line tool from <link
                xlink:href="http://curl.haxx.se/"
                >http://curl.haxx.se/</link>. </para>
            <para>With cURL you can send HTTP requests and receive
              responses back from the command line. </para>
          </listitem>
          <listitem>
            <para>If you like to use a more graphical interface, the
              ReST client for Firefox also works well for testing and
              trying out commands, see <link
                xlink:href="https://addons.mozilla.org/en-US/firefox/addon/restclient/"
                >https://addons.mozilla.org/en-US/firefox/addon/restclient/</link>.
            </para>
          </listitem>
          <listitem>
            <para>You can also download and install rest-client, a
              Java application to test ReSTful web services, from
                <link
                xlink:href="http://code.google.com/p/rest-client/"
                >http://code.google.com/p/rest-client/</link>. </para>
          </listitem>
        </itemizedlist>
        <para>cURL is a command-line tool that is available on most
          UNIX®-like environments and Mac OS X® and can be downloaded
          for Windows® in order to interact with the ReST interfaces.
          For more information on cURL, visit <link
            xlink:href="http://curl.haxx.se/"
            >http://curl.haxx.se/</link>. </para>
        <para>cURL allows you to transmit and receive HTTP requests
          and responses from the command-line or from within a shell
          script. This makes it possible to work with the ReST API
          directly without using one of the client APIs. </para>
        <para>The following cURL command-line options will be used in
          this guide to run the examples:</para>
        <variablelist>
          <title>cURL Command-Line Options</title>
          <varlistentry>
            <term><option>-d</option></term>
            <listitem>
              <para>Sends the specified data in a post request to the
                HTTP server.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>-i</option></term>
            <listitem>
              <para>Includes the HTTP header in the output.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>-H HEADER</option></term>
            <listitem>
              <para>Specify an HTTP header in the request.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>-X</option></term>
            <listitem>
              <para>Specifies the request method to use when
                communicating with the HTTP server. The specified
                request is used instead of the default method, which
                is GET. For example, <option>-X PUT</option> specifies
                to use the PUT request method.</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <note>
          <para>If you have the tools, you can run the cURL JSON
            request examples with the following options to format the
            output from cURL: <command>&lt;curl JSON request example>
              | python -mjson.tool</command>.</para>
        </note>
        <para/>
        <para xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:m="http://www.w3.org/1998/Math/MathML"
          xmlns:html="http://www.w3.org/1999/xhtml">To run the cURL
          request examples shown in this guide on Linux or Mac
          systems, copy and paste each example from the HTML version
          of this guide into an ASCII editor (for example <emphasis
            role="bold">vi</emphasis> or <emphasis role="bold"
            >TextEdit</emphasis>). Then modify each example with your
          required account information and so forth, as detailed in
          this guide.</para>
        <note xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:m="http://www.w3.org/1998/Math/MathML"
          xmlns:html="http://www.w3.org/1999/xhtml">
          <para>The carriage returns in the cURL request examples that
            are part of the cURL syntax are escaped with a backslash
            ('\') in order to avoid prematurely terminating the
            command. However you should not escape carriage returns
            inside the xml or json message within the command.</para>
        </note>
        <para xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:m="http://www.w3.org/1998/Math/MathML"
          xmlns:html="http://www.w3.org/1999/xhtml">Consider the
          following cURL Authenticate Request: XML example that is
          described in detail in <xref linkend="authentication-1"
          />:</para>
        <example xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:m="http://www.w3.org/1998/Math/MathML"
          xmlns:html="http://www.w3.org/1999/xhtml">
          <title>cURL Authenticate Request: XML</title>
          <?dbfo keep-together="always"?>
          <screen language="bash"><command>curl</command> <option>-i</option> <option>-d</option> \
'&lt;?xml version="1.0" encoding="UTF-8"?>  
 &lt;auth&gt;   
    &lt;apiKeyCredentials     
        xmlns="http://docs.rackspace.com/identity/api/ext/RAX-KSKEY/v1.0"     
        username="<emphasis role="bold">your_username</emphasis>"     
        apiKey="<emphasis role="bold">your_api_key</emphasis>"/&gt;   
 &lt;/auth&gt;<option>'</option> \
<uri>'https://identity.api.rackspacecloud.com/v2.0/tokens'</uri></screen>
        </example>
        <para xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:m="http://www.w3.org/1998/Math/MathML"
          xmlns:html="http://www.w3.org/1999/xhtml">You can see that
          the lines that are part of the cURL command syntax have all
          been escaped with a backslash ('\') to indicate that the
          command continues on the next line:</para>
        <screen language="bash" xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml"><command>curl</command> <option>-i</option> <option>-d</option> \
  
   
(... lines within the xml portion of the message are not shown in this example)
(... the example only shows lines that are part of cURL syntax)     
     
    
   
 &lt;/auth&gt;<option>'</option> \
<uri>'https://identity.api.rackspacecloud.com/v2.0/tokens'</uri></screen>
        <para xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:m="http://www.w3.org/1998/Math/MathML"
          xmlns:html="http://www.w3.org/1999/xhtml">However the lines
            <emphasis>within</emphasis> the xml portion of the message
          are <emphasis>not</emphasis> escaped with a backslash ('\')
          in order to avoid issues with the xml processing:</para>
        <screen language="bash" xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml">'&lt;?xml version="1.0" encoding="UTF-8"?>  
 &lt;auth&gt;   
    &lt;apiKeyCredentials     
        xmlns="http://docs.rackspace.com/identity/api/ext/RAX-KSKEY/v1.0"     
        username="<emphasis role="bold">your_username</emphasis>"     
        apiKey="<emphasis role="bold">your_api_key</emphasis>"/&gt;   
 &lt;/auth&gt;<option>'</option> \
</screen>
        <note xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:m="http://www.w3.org/1998/Math/MathML"
          xmlns:html="http://www.w3.org/1999/xhtml">
          <para>The final line of the xml message is escaped since the
            backslash lies <emphasis>outside</emphasis> the xml
            message and continues the cURL command to the next
            line.</para>
        </note>
        <para xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:m="http://www.w3.org/1998/Math/MathML"
          xmlns:html="http://www.w3.org/1999/xhtml">After you are
          finished modifying the text for the cURL request example
          with your information (for example <emphasis role="bold"
              ><code>your_username</code></emphasis> and <emphasis
            role="bold"><code>your_api_key</code></emphasis>), paste
          it into your terminal window. Then execute the cURL command
          by pressing <guilabel>Enter</guilabel>.</para>
        <para xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:m="http://www.w3.org/1998/Math/MathML"
          xmlns:html="http://www.w3.org/1999/xhtml">If you have
          trouble copying and pasting the examples as described, try
          typing the entire example on one long line, removing all the
          backslash line continuation characters.</para>
      </section>  </section>
      </section>
      --></section>
</chapter>
  <chapter xml:id="stepping_through_the_api" >
    <title xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml">Working with Your
      First Message Queue </title>
    <para>This chapter contains a simple exercise that will help you
      become familiar with some basic Cloud Queuing requests. The
      requests included in this exercise are ones you would commonly
      use. Example requests are provided in cURL, followed by the
      response.  </para>
    <para>For a complete list of requests available for Cloud Queuing,
      see <xref linkend="cloud-queuing-actions"/>. Each request
      available will be fully described in the <emphasis role="italic"
        >Cloud Queuing Developer Guide</emphasis>.</para>
    <section xml:id="create_queue">
      <title>Create Queue</title>
      <para><code>Create Queue</code> creates a queue and sets its
        metadata. </para>
      <para>The body of the PUT is a document that can contain
        arbitrary metadata to associate with the queue, with a limit
        of 4 KB when serialized as JSON including whitespace.
        Top-level field names <emphasis role="italic">must
          not</emphasis> start with an underscore. Such names are
        reserved for future use.</para>
      <para>The Create Queue template is:</para>
      <para>
        <programlisting>PUT {base_url}/queues/{queue_name}

{
    ...
}</programlisting>
      </para>
      <para>
        <tag class="attribute">queue_name</tag> is the name to give
        the queue. The name <emphasis role="italic">must
          not</emphasis> exceed 64 bytes in length and is limited to
        US-ASCII letters, digits, underscores, and hyphens. If the
        specified queue already exists, the existing queue's metadata
        is overwritten with the provided document.</para>
      <para>Examples of a Create Queue request and response are given
        next:</para>
      <example>
        <title>cURL Create Queue Request</title>
        <programlisting>curl -i -X PUT https://preview.queue.api.rackspacecloud.com:443/v1/queues/samplequeue -d '{"metadata": "Awesome Queue"}' -H "Content-type: application/json" -H "X-Auth-Token: 68d94fd912cc4b2bb5c2fe956de46d46" -H "X-Project-Id: 101010" </programlisting>
      </example>
      <example>
        <title>Create Queue Response</title>
        <programlisting>HTTP/1.1 201 Created
Content-Length: 0
Location: /v1/queues/samplequeue</programlisting>
      </example>
    </section>
    <section xml:id="insert_messages" >
      <title>Insert Messages</title>
      <para><code>Insert Messages</code> places messages in a queue. </para>
      <para>You can submit up to 10 messages in a single request, but
        you must encapsulate them in a collection container (an array
        in JSON). You can use the resulting value of the location
        header or response body to retrieve the created messages for
        further processing if needed. </para>
      <para>The Insert Messages template
        is:<programlisting>POST {base_url}/queues/{queue_name}/messages</programlisting></para>
      <para>The client specifies only the <tag class="attribute"
          >body</tag> and <tag class="attribute">ttl</tag> for the
        message. The server inserts the metadata, such as <tag
          class="attribute">id</tag> and <tag class="attribute"
          >age</tag>. </para>
      <para>The response body contains a list of resource paths
        corresponding to each message submitted in the request, in the
        same order. In the case of a server-side error part-way
        through the processing of the submitted messages, a partial
        list is returned. <tag class="attribute">partial</tag> is set
        to <tag class="attribute">true</tag>, and the client retries
        posting the remaining messages. If the server cannot enqueue
        messages, the server returns <code>503 Service
          Unavailable</code>.</para>
      <para><tag class="attribute">body</tag> specifies an arbitrary
        document that constitutes the body of the message being sent.
        The size of this body, including characters and whitespace, is
        limited to 256 KB. The document <emphasis role="italic"
          >must</emphasis> be valid JSON. (Cloud Queuing validates
        it.)</para>
      <para><tag class="attribute">ttl</tag> is how long the server
        should wait before expiring and removing the message from the
        queue. Valid values are between 60 and 1209600 seconds (14
        days), inclusive. Note: To allow for flexibility in storage
        implementations, the server might not actually delete the
        message until its age reachs up to <tag class="attribute">(ttl
          + 60)</tag> seconds.</para>
      <para>Examples of an Insert Messages request and response are
        given next:</para>
      <example>
        <title>cURL Insert Messages Request</title>
        <programlisting>curl -i -X POST https://preview.queue.api.rackspacecloud.com:443/v1/queues/samplequeue/messages -d '[{"ttl": 300,"body": {"event": "BackupStarted"}},{"ttl": 60,"body": {"play": "hockey"}}]' -H "Content-type: application/json" -H "Client-ID: QClient" -H "X-Auth-Token: 68d94fd912cc4b2bb5c2fe956de46d46" -H "X-Project-Id: 101010" </programlisting>
      </example>
      <example>
        <title>Insert Messages Response </title>
        <programlisting>HTTP/1.1 201 Created
Content-Length: 153
Content-Type: application/json; charset=utf-8
Location: /v1/queues/samplequeue/messages?ids=51ca00a0c508f154c912b85c,51ca00a0c508f154c912b85d

{"partial": false, "resources": ["/v1/queues/samplequeue/messages/51ca00a0c508f154c912b85c", "/v1/queues/samplequeue/messages/51ca00a0c508f154c912b85d"]}
</programlisting>
      </example>
    </section>
    <section xml:id="Claim_messages">
      <title>Claim Messages</title>
      <para><code>Claims Messages</code> claims a set of messages (up
        to <tag class="attribute">limit</tag>) from oldest to newest
        and skips any that are already claimed. If no unclaimed
        messages are available, Cloud Queuing returns <code>204 No
          Content</code>. </para>
      <para>The Claim Messages template is:</para>
      <programlisting>POST {base_url}/queues/{queue_name}/claims{?limit}
Content-Type: application/json

...

{ 
    "ttl": {claim_ttl},
    "grace": {message_grace}
}</programlisting>
      <para>The client should delete the message when it has finished
        processing it, before the claim expires, to ensure the message
        is processed only once. As part of the delete operation, all
        worker clients should specify the claim ID (this is best done
        by simply using the provided href). That way, the server can
        return an error if the claim just expired (notifying the
        client of the race condition), giving the worker a chance to
        roll back its own processing of the given message, since
        another worker will likely claim the message and process it. </para>
      <para>Just as with a message's age, the age given for the claim
        is relative to the server's clock, and is useful for
        determining how quickly messages are getting processed, and
        whether a given message's claim is about to expire. </para>
      <para>When a claim expires, it is removed, allowing another
        client worker to claim the message in the case that the
        original worker fails to process it.</para>
      <para><tag class="attribute">limit</tag> specifies up to 50
        messages to claim. If not specified, limit defaults to 10.
        Note that claim creation is best-effort, meaning the server
        may claim and return less than the requested number of
        messages. </para>
      <para><tag class="attribute">ttl</tag> is how long the server
        should wait before releasing the claim. Value MUST be between
        60 and 43200 seconds (12 hours). </para>
      <para><tag class="attribute">grace</tag> is the message grace
        period in seconds. Valid values are between 60 and 43200
        seconds (12 hours). In order to deal with crashed workers (up
        to 1209600 or 14 days including claim lifetime), the server
        extends the lifetime of claimed messages to be at least as
        long as the lifetime of the claim itself, plus a specified
        grace period. If a claimed message normally lives longer than
        the grace period, its expiration is not adjusted.</para>
      <para>Examples of a Claim Messages request and response are given
        next:</para>
      <example>
        <title>cURL Claim Messages Request</title>
        <programlisting>curl -i -X POST https://preview.queue.api.rackspacecloud.com:443/v1/queues/samplequeue/claims -d '{"ttl": 300,"grace":300}' -H "Content-type: application/json" -H "Client-ID: QClient" -H "X-Auth-Token: 68d94fd912cc4b2bb5c2fe956de46d46" -H "X-Project-Id: 101010"
</programlisting>
      </example>
      <example>
        <title>Claim Messages Response</title>
        <programlisting>HTTP/1.1 200 OK
Content-Length: 164
Content-Type: application/json; charset=utf-8
Location: /v1/queues/samplequeue/claims/51ca011c821e7250f344efd6

[{"body": {"event": "BackupStarted"}, "age": 124, "href": "/v1/queues/samplequeue/messages/51ca00a0c508f154c912b85c?claim_id=51ca011c821e7250f344efd6", "ttl": 300}]</programlisting>
      </example>
    </section>
    <section xml:id="Delete_messages">
      <title>Delete Messages with Claim ID</title>
      <para><code>Delete Messages</code> deletes messages.</para>
      <para>The Delete Messages template
        is:<programlisting>DELETE {base_url}/queues/{queue_name}/messages/{message_id}{?claim_id}
</programlisting></para>
      <para><tag class="attribute">message_id</tag> specifies the
        message to delete. </para>
      <para><tag class="attribute">claim_id</tag> specifies that the
        message should be deleted only if it has the specified claim
        ID and that claim has not expired. This specification is
        useful for ensuring only one agent processes any given
        message. Whenever a worker client's claim expires before it
        has a chance to delete a message it has processed, the worker
        must roll back any actions it took based on that message since
        another worker can now claim and process the same
        message.</para>
      <para>Examples of a Delete Messages request and response are
        given next:</para>
      <example>
        <title>cURL Delete Messages Request</title>
        <programlisting>curl -i -X DELETE https://preview.queue.api.rackspacecloud.com:443/v1/queues/samplequeue/messages/51ca00a0c508f154c912b85c?claim_id=51ca011c821e7250f344efd6 -H "Content-type: application/json" -H "X-Auth-Token: 68d94fd912cc4b2bb5c2fe956de46d46" -H "Client-ID: QClient"  -H "X-Project-Id: 101010"</programlisting>
      </example>
      <example>
        <title>Delete Messages Response</title>
        <programlisting>HTTP/1.1 204 No Content</programlisting>
      </example>
    </section>
    <section xml:id="Delete_claim">
      <title>Delete Claim </title>
      <para><code>Delete Claim</code> immediately releases a claim
        making any (remaining, non-deleted) messages associated with
        the claim available to other workers. </para>
      <para>The Delete Claim template is:</para>
      <programlisting>DELETE {base_url}/queues/{queue_name}/claims/{claim_id}</programlisting>
      <para><code>Delete Claim</code> is useful when a worker is
        performing a graceful shutdown, fails to process one or more
        messages, or is taking longer than expected to process
        messages and wishes to make the remainder of the messages
        available to other workers. </para>
      <para>Examples of a Delete Claim request and response are given
        next:</para>
      <example>
        <title>cURL Delete Claim Request</title>
        <programlisting>curl -i -X DELETE https://preview.queue.api.rackspacecloud.com:443/v1/queues/samplequeue/claims/51ca011c821e7250f344efd6 -H "Content-type: application/json" -H "X-Auth-Token: 68d94fd912cc4b2bb5c2fe956de46d46" -H "Client-ID: QClient"  -H "X-Project-Id: 101010"</programlisting>
      </example>
      <example>
        <title>Delete Claim Response</title>
        <programlisting>HTTP/1.1 204 No Content</programlisting>
      </example>
    </section>
    <section xml:id="Delete_queue">
      <title>Delete Queue </title>
      <para>Delete Queue immediately deletes a queue along with all of
        its messages (if any exists).</para>
      <para>The Delete Queue template
        is:<programlisting>DELETE {base_url}/queues/{queue_name}</programlisting></para>
      <para>Examples of a Delete Queue request and response are given
        next:</para>
      <example>
        <title>cURL Delete Queue Request</title>
        <programlisting>curl -i -X DELETE https://preview.queue.api.rackspacecloud.com:443/v1/queues/samplequeue -H "Content-type: application/json" -H "X-Auth-Token: 15eb3ad0f864402ea5904f80324307a4"</programlisting>
      </example>
      <example>
        <title>Delete Queue Response</title>
        <programlisting>HTTP/1.1 204 No Content
</programlisting>
      </example>
    </section>
  </chapter>
  <chapter xml:id="additional-resources" >
    <title>Additional Resources</title>
    <!--
    <para>You can download the most current versions of the
      API-related documents from <link
        xlink:href="http://docs.rackspace.com/api/"
        >docs.rackspace.com/api/</link>. 
    </para>
    -->
    <para>For information about the OpenStack Marconi API, refer to
        <link
        xlink:href="https://wiki.openstack.org/wiki/Marconi/specs/api/v1"
        >wiki.openstack.org/wiki/Marconi/specs/api/v1</link>.</para>
    <para> For information about Rackspace Cloud products, refer to
        <link xlink:href="http://www.rackspace.com/cloud/">
        www.rackspace.com/cloud</link>. This site also offers links to
      Rackspace's official support channels, including knowledge base
      articles, forums, phone, chat, and email. </para>
    <para>You can follow Rackspace updates and announcements
      via twitter at: <link
        xlink:href="http://www.twitter.com/rackspace"
        >www.twitter.com/rackspace</link>. </para>
    <para>This API uses standard HTTP 1.1 response codes as
      documented at: <link
        xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
        >www.w3.org/Protocols/rfc2616/rfc2616-sec10.html</link>.
    </para>
  </chapter>
  <chapter xml:id="doc-change-history">
    <title>Document Change History</title>
    <para>This version of the Getting Started replaces and obsoletes
      all previous versions. The most recent changes are described in
      the table below: </para>
    <?rax revhistory?>
  </chapter>
  <glossary xml:id="glossary-d1e018">
    <title>Glossary</title>
    <info>
      <raxm:metadata xmlns:raxm="http://docs.rackspace.com/api/metadata">
        <raxm:type>concept</raxm:type>
        <raxm:product version="v1.0">cdns</raxm:product>
        <raxm:priority>50</raxm:priority>
      </raxm:metadata> 
    </info>
    <glossentry xml:id="claim-d1e017">
      <glossterm>Claim</glossterm>
      <glossdef>
        <para> A worker claims or checks out a message to perform a
          task. Doing so prevents other workers from attempting to
          perform the same task.</para>
      </glossdef>
    </glossentry>
    <glossentry xml:id="message-d1e016">
      <glossterm>Message</glossterm>
      <glossdef>
        <para>A message is a task, a notification, or anything else
          that gets posted to the queue.</para>
      </glossdef>
    </glossentry>
    <glossentry xml:id="producer-d1e020">
      <glossterm>Producer</glossterm>
      <glossdef>
        <para>A producer is a server that sends messages to the
          queue.</para>
      </glossdef>
    </glossentry>
    <glossentry xml:id="queue-d1e019">
      <glossterm>Queue</glossterm>
      <glossdef>
        <para>A queue holds messages.</para>
      </glossdef>
    </glossentry>
    <glossentry xml:id="subscriber-d1e018">
      <glossterm>Subscriber</glossterm>
      <glossdef>
        <para>A subscriber (or observer) watches messages like an RSS
          feed, but does not claim any messages.</para>
      </glossdef>
    </glossentry>
    <glossentry xml:id="worker-d1e018" >
      <glossterm>Worker</glossterm>
      <glossdef>
        <para>A worker is a server that claims a messages and performs
          the necessary task.</para>
      </glossdef>
    </glossentry>
  </glossary>
</book>
